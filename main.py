import asyncio
import aiohttp
import logo
import json
import csv
from datetime import datetime, timezone
from eth_account import Account
from eth_account.messages import encode_defunct
import time
import random
import string
import logging
from fake_useragent import UserAgent
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.logging import RichHandler
from rich.panel import Panel
from rich.text import Text
from rich import box

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å Rich
console = Console()
logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    datefmt="[%X]",
    handlers=[RichHandler(console=console, rich_tracebacks=True)]
)
logger = logging.getLogger("ethereum_client")


class EthereumClient:
    def __init__(self):
        self.session = None
        
    async def __aenter__(self):
        timeout = aiohttp.ClientTimeout(total=30, connect=10)
        connector = aiohttp.TCPConnector(limit=100, limit_per_host=30)
        self.session = aiohttp.ClientSession(
            timeout=timeout,
            connector=connector
        )
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    def generate_nonce(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç nonce –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –ø—Ä–∏–º–µ—Ä ntyw5Hpl4gdiPFP0b"""
        chars = string.ascii_letters + string.digits
        return ''.join(random.choice(chars) for _ in range(17))
    
    def create_message(self, address, nonce=None):
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏"""
        if not nonce:
            nonce = self.generate_nonce()
            
        issued_at = datetime.now(timezone.utc).isoformat().replace('+00:00', 'Z')
        expiration_time = datetime.fromtimestamp(
            datetime.now().timestamp() + 7*24*3600, timezone.utc
        ).isoformat().replace('+00:00', 'Z')
        
        message = f"""knowledgedrop.saharaai.com wants you to sign in with your Ethereum account:
{address}

Sign in with Ethereum to the app.

URI: https://knowledgedrop.saharaai.com
Version: 1
Chain ID: 1
Nonce: {nonce}
Issued At: {issued_at}
Expiration Time: {expiration_time}"""
        
        return message
    
    def sign_message(self, private_key, message):
        """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
            account = Account.from_key(private_key)
            
            # –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            message_hash = encode_defunct(text=message)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º
            signed_message = account.sign_message(message_hash)
            
            return {
                'address': account.address,
                'signature': '0x' + signed_message.signature.hex(),
                'message': message
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return None
    
    async def sign_in(self, address, signature, message, user_agent, proxy=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - sign_in"""
        headers = {
            'accept': '*/*',
            'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'content-type': 'application/json',
            'origin': 'https://knowledgedrop.saharaai.com',
            'user-agent': f'{user_agent}'
        }
        
        data = {
            "address": address,
            "signature": signature,
            "message": message,
            "public_key": ""
        }
        
        try:
            async with self.session.post(
                'https://earndrop.prd.galaxy.eco/sign_in',
                headers=headers,
                json=data,
                proxy=proxy,
                timeout=30
            ) as response:
                if response.status == 200:
                    result = await response.json()
                    return result.get('token')
                else:
                    print(f"–û—à–∏–±–∫–∞ sign_in: {response.status}")
                    return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ sign_in –∑–∞–ø—Ä–æ—Å–µ: {e}")
            return None
    
    async def get_info(self, token,user_agent, proxy=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        headers = {
            'accept': '*/*',
            'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'authorization': token,
            'origin': 'https://knowledgedrop.saharaai.com',
            'user-agent': f'{user_agent}'
        }
        
        try:
            async with self.session.get(
                'https://earndrop.prd.galaxy.eco/sahara/info',
                headers=headers,
                proxy=proxy,
                timeout=30
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    print(f"–û—à–∏–±–∫–∞ get_info: {response.status}")
                    return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ get_info –∑–∞–ø—Ä–æ—Å–µ: {e}")
            return None
    
    async def process_wallet(self, private_key, proxy=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∫–æ—à–µ–ª–µ–∫"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
            account = Account.from_key(private_key)
            address = account.address
            
            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: {address}")
            
            # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self.create_message(address)
            signed_data = self.sign_message(private_key, message)
            
            if not signed_data:
                return {"address": address, "status": "error", "error": "–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏"}
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º sign_in
            user_agent =  UserAgent(platforms='desktop')
            user_agent = user_agent.random
            token = await self.sign_in(
                signed_data['address'], 
                signed_data['signature'], 
                signed_data['message'],
                user_agent,
                proxy
            )
            
            if not token:
                return {"address": address, "status": "error", "error": "–û—à–∏–±–∫–∞ sign_in"}
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            info = await self.get_info(token,user_agent, proxy)
            
            if not info:
                return {"address": address, "status": "error", "error": "–û—à–∏–±–∫–∞ get_info"}
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            data = info.get('data', {})
            total_amount = float(data.get('total_amount', '0')) / 10**18  # Wei to ETH
            
            return {
                "address": address,
                "status": "success",
                "total_amount": total_amount,
                "claimed_amount": float(data.get('claimed_amount', '0')) / 10**18,
                "eligible_amount": float(data.get('eligible_amount', '0')) / 10**18,
                "stages_count": len(data.get('stages', []))
            }
            
        except Exception as e:
            return {"address": "unknown", "status": "error", "error": str(e)}

def save_results_to_csv(results, filename="results.csv"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['wallet_address', 'status', 'total_amount', 'claimed_amount', 'eligible_amount', 'stages_count', 'timestamp']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            writer.writeheader()
            
            for result in results:
                if isinstance(result, dict):
                    if int(result.get('total_amount', 0)) > 0:
                        writer.writerow({
                            'wallet_address': result.get('address', 'unknown'),
                            'status': result.get('status', 'error'),
                            'total_amount': result.get('total_amount', 0),
                            'claimed_amount': result.get('claimed_amount', 0),
                            'eligible_amount': result.get('eligible_amount', 0),
                            'stages_count': result.get('stages_count', 0),
                            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        })
                else:
                    writer.writerow({
                        'wallet_address': 'unknown',
                        'status': 'critical_error',
                        'total_amount': 0,
                        'claimed_amount': 0,
                        'eligible_amount': 0,
                        'stages_count': 0,
                        'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    })
        
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ CSV: {e}")
        return False

def print_results_table(results):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è Rich"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    table = Table(box=box.ROUNDED, title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–æ–≤")
    table.add_column("‚Ññ", style="dim", width=3)
    table.add_column("–ê–¥—Ä–µ—Å", style="cyan", width=42)
    table.add_column("–°—Ç–∞—Ç—É—Å", width=12)
    table.add_column("–û–±—â–∞—è —Å—É–º–º–∞ SAHARA", style="green", justify="right", width=15)
    table.add_column("–î–æ—Å—Ç—É–ø–Ω–æ SAHARA", style="yellow", justify="right", width=15)
    table.add_column("–ó–∞–∫–ª–µ–π–º–ª–µ–Ω–æ SAHARA", style="red", justify="right", width=15)
    table.add_column("–≠—Ç–∞–ø—ã", justify="center", width=6)
    
    total_wallets = len(results)
    successful = 0
    total_amount = 0
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏
    for i, result in enumerate(results, 1):
        if isinstance(result, dict):
            address = result['address']
            short_address = f"{address[:6]}...{address[-4:]}" if len(address) > 10 else address
            
            if result['status'] == 'success':
                successful += 1
                amount = result['total_amount']
                total_amount += amount
                
                table.add_row(
                    str(i),
                    short_address,
                    "[green]‚úÖ –£—Å–ø–µ—Ö[/green]",
                    f"{amount:.6f}",
                    f"{result['eligible_amount']:.6f}",
                    f"{result['claimed_amount']:.6f}",
                    str(result['stages_count'])
                )
            else:
                error_msg = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                short_error = error_msg[:15] + "..." if len(error_msg) > 15 else error_msg
                table.add_row(
                    str(i),
                    short_address,
                    "[red]‚ùå –û—à–∏–±–∫–∞[/red]",
                    "-",
                    "-",
                    "-",
                    f"[red]{short_error}[/red]"
                )
        else:
            error_str = str(result)[:15] + "..." if len(str(result)) > 15 else str(result)
            table.add_row(
                str(i),
                "unknown",
                "[bright_red]üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è[/bright_red]",
                "-",
                "-", 
                "-",
                f"[bright_red]{error_str}[/bright_red]"
            )
    
    # –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É
    console.print(table)
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø–∞–Ω–µ–ª–∏
    success_rate = (successful/total_wallets*100) if total_wallets > 0 else 0
    
    stats_text = f"""üìä –í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤:           {total_wallets}
‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:        {successful}
‚ùå –û—à–∏–±–æ–∫:                    {total_wallets - successful}
üí∞ –û–±—â–∞—è —Å—É–º–º–∞ SAHARA:        {total_amount:.6f}
üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:            {success_rate:.1f}%"""
    
    console.print(Panel(stats_text, title="üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", style="bold green"))

def load_private_keys(filename="private.txt"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            keys = [line.strip() for line in f if line.strip()]
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(keys)} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ {filename}")
        return keys
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return []

def load_proxies(filename="proxy.txt"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            proxies = [line.strip() for line in f if line.strip()]
        if proxies:
            print(f"üåê –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏ –∏–∑ {filename}")
        return proxies
    except FileNotFoundError:
        print(f"üìÅ –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return []

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
    private_keys = load_private_keys("private.txt")
    proxies = load_proxies("proxy.txt")
    
    if not private_keys:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ private.txt")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª private.txt –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
        return
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(private_keys)} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π")
    if proxies:
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(proxies)} –ø—Ä–æ–∫—Å–∏")
    else:
        print("–ü—Ä–æ–∫—Å–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
    
    results = []
    
    async with EthereumClient() as client:
        tasks = []
        
        for i, private_key in enumerate(private_keys):
            proxy = proxies[i % len(proxies)] if proxies else None
            task = client.process_wallet(private_key, proxy)
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
    
    
    print_results_table(results)
    save_results_to_csv(results)

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:
    
    asyncio.run(main())
